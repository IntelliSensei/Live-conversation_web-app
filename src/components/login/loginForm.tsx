import { FC, useState } from "react";
import { TextField } from "../input";
import "../css/loginForm.css";
import { PasswordField } from "../input/PasswordField";
import { useSessionStorage } from "../../hooks";
import { useMutation, gql } from "@apollo/client";
import jwt_decode from "jwt-decode"
import { SignUpForm } from "./signUpForm";


interface ILoginFormProps {
  onSignUpClick: () => void;
  email?: string;
  password?: string;
}

// Generated by https://quicktype.io

export interface LoginOutput {
  loginUser: LoginUser;
}

export interface LoginUser {
  message: string;
  token: string;
  __typename: string;
  email: string;
  password: string;
}

export const LoginForm: FC<ILoginFormProps> = ({
  onSignUpClick,
}: ILoginFormProps) => {
  const [loginUser, { data, loading, error }] = useMutation<LoginOutput>(gql`
    mutation LoginUser($loginInput: LoginInput) {
      loginUser(loginInput: $loginInput) {
        message
        token
        email
      }
    }
  `);

  const LoginState = () => {
    if (loading) {
      return <div>loading</div>;
    }

    if (error) {
      return <div>{error.message}</div>;
    }

    if (!data) {
      return <div></div>;
    }

    return <div>{data.loginUser.message}</div>;
  };


  const [emailValue, setEmailValue] = useState("");
  const [passwordValue, setPasswordValue] = useState("");
  const [token, setToken] = useSessionStorage("token", "");

  if (token.length > 1) {
    const decodedToken = jwt_decode(token) as any;
    console.log(decodedToken);
    return <div>{decodedToken.email}</div>;
  }

  return (
    <form
      onSubmit={(ev) => {
        ev.preventDefault();
        loginUser({
          variables: {
            loginInput: {
              email: emailValue,
              password: passwordValue,
            },
          },
        }).then((data) => {
          setToken(data.data?.loginUser.token || "");
        });

      }}
      autoComplete="off"
    >
      <div className="login-form" >
        <h2>Login</h2>
        <TextField placeholder="email" onChange={(nv) => setEmailValue(nv)} />
        <PasswordField placeholder="password" onChange={(nv) => setPasswordValue(nv)} />

        <button type="submit">Log in</button>
        <button type="button" onClick={() => onSignUpClick()}>
          Sign up
        </button>
      </div>
    </form>

  );
};
